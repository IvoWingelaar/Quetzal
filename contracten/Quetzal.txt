class Quetzal
\\Represents the chocolatebar.

    *now: Integer
    *started: Boolean
    *stock: Stock
    *users: UserContainer
    *employees: EmployeePresent
    *last_employee_id: Integer
    *history: List
    *employee_ids: List

+__init__()
\\Initialises an empty chocolatebar.
\\PRE None
\\POST An empty chocolatebar (not yet users, stock or employees).

+add_to_stock(in item:Product)
\\Adds an item to the stock.
\\PRE 'item' is of type Product.
\\POST 'item' is added to the corresponding stock.

+add_user(in firstname:String, in lastname:String, in email:String)
\\Adds a new user to the users with the given firstname, lastname and email.
\\PRE 'firstname', 'lastname' and 'email' are Strings.
\\POST A new user is added to the chocolatebar's users.

+add_employee(in firstname:String, in lastname:String, in workload:Integer)
\\Adds a new employee to the employees with the given firstname, lastname and workload.
\\PRE 'firstname' and 'lastname' are Strings. 'workload' is an Integer.
\\POST A new employee is added to the chocolatebar's employees.

+start_system()
\\Starts the simulation logic.
\\PRE The simulation must not yet have been started.
\\POST The simulation is started. The current timestep is zero.

+is_started(out bool:Boolean) {query}
\\Returns a boolean stating whether the simulation has already started ot not.
\\PRE None
\\POST 'bool' is true if the simulation has already started, false otherwise.

+place_order(in email:String, in products:List, in datetime:DateTime)
\\Places an order on the given 'datetime'.
\\PRE   The simulation must have started. 'email' is a String, 'products' is a
\\      List and 'datetime' is a DateTime. 'datetime' must not be of the past.
\\POST The order is added to the simulation logic.

+run_until(in timestep:Integer)
\\Performs the simulation up to the 'timestep'.
\\PRE The simulation must have started. 'timestep' is an Integer.
\\POST  The simulation will  step until it reaches the 'timestep'.

+step()
\\Takes a step in the simulation.
\\PRE The simulation must have started.
\\POST  As many orders as possible will be processed by the employees. All
\\      relevant information will be saved in the logbook.

+get_datetime(out datetime:DateTime) {query}
\\Returns the current datetime of the simulation.
\\PRE The simulation must have started.
\\POST 'datetime' is the current datetime.

+log()
\\Exports all relevant information for the state of the chocolatebar into
\\a html file.
\\PRE The simulation must have started.
\\POST A logbook in the format 'logx.html' will be created. 'x' represents the
\\timestep of the current moment.