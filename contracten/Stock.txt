Class Stock
\\Contains all the stocks of the different products.

    *stocks:List

+__init__(in products:List of Strings, in type:ListType)
\\Initialises a new stock for each of the given products in 'products'.
\\PRE   'type' is a circular linked list (CLL) or a doubly linked list (DLL).
\\      Type decides the kind of implementation of the stocks. 'products' is
\\      a list of Strings representing the product's name.
\\POST Each product has now an empty stock of type 'type'.

+add_item(in item:Product)
\\Adds a 'item' to the corresponding stock.
\\PRE 'item' is of type Product.
\\POST 'item' is added to the stock in which it belongs.

+is_empty(in product_type:String, out bool:Boolean) {query}
\\Returns a boolean stating whether the stock of with type-name 'product_type'
\\is empty or not.
\\PRE 'product' is a String with the name of a product.
\\POST  'bool' is true if the stock of with type-name 'product_type' is empty,
\\      false otherwise.

+get_size(in product_type:String, out size:Integer) {query}
\\Returns the size of the stock with type-name 'product_type'.
\\PRE product' is a String with the name of a product.
\\POST 'size' is the size of the stock with type-name 'product_type'.

+clean_stock(in date:Date)
\\Cleans out expired products from the stock, all products with expiration dates
\\earlier in time then 'date' are removed.
\\PRE 'date' is of type Date.
\\POST  The stock does not contain products with expiration dates earlier in time
\\      then 'date'.

+pop_item(in product_type:String, in date:Date)
\\Removes the product (of type 'product_type') with the most urgent expiration date
\\from te corresponding stock-list. Products with expiration dates that have already
\\passed will be ignored.
\\PRE   'product_type' is a string corresponding to the item-type of a list in the stock.
\\      'date' is of type Date.
\\POST  If 'product_type corresponds to a type of the lists in the stock and this
\\      particular list contains an item with an expiration date "higher or equal to" the
\\      given date, then the item with the most urgent expiration date is removed from
\\      that list and returned.

+get_product_list(out products:List) {query}
\\Makes a list of every product-type for which a separate stock-list exists.
\\PRE None
\\POST 'products' is a list with each different product-type as a string.